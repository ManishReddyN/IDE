[{"D:\\Web\\IDE\\frontend\\src\\index.js":"1","D:\\Web\\IDE\\frontend\\src\\serviceWorkerRegistration.js":"2","D:\\Web\\IDE\\frontend\\src\\Routes.js":"3","D:\\Web\\IDE\\frontend\\src\\App.js":"4","D:\\Web\\IDE\\frontend\\src\\redirect.js":"5","D:\\Web\\IDE\\frontend\\src\\backend.js":"6","D:\\Web\\IDE\\frontend\\src\\helper\\linkHelper.js":"7","D:\\Web\\IDE\\frontend\\src\\components\\Nav.js":"8","D:\\Web\\IDE\\frontend\\src\\helper\\runHelper.js":"9"},{"size":588,"mtime":1618409533939,"results":"10","hashOfConfig":"11"},{"size":5233,"mtime":1618409533942,"results":"12","hashOfConfig":"11"},{"size":445,"mtime":1618409533938,"results":"13","hashOfConfig":"11"},{"size":17038,"mtime":1618419216822,"results":"14","hashOfConfig":"11"},{"size":2456,"mtime":1618414031070,"results":"15","hashOfConfig":"11"},{"size":111,"mtime":1618419267877,"results":"16","hashOfConfig":"11"},{"size":387,"mtime":1618409533939,"results":"17","hashOfConfig":"11"},{"size":564,"mtime":1618418204967,"results":"18","hashOfConfig":"11"},{"size":488,"mtime":1618417579493,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"z9yazj",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Web\\IDE\\frontend\\src\\index.js",[],"D:\\Web\\IDE\\frontend\\src\\serviceWorkerRegistration.js",[],"D:\\Web\\IDE\\frontend\\src\\Routes.js",[],"D:\\Web\\IDE\\frontend\\src\\App.js",["39"],"import AceEditor from \"react-ace\";\r\nimport \"ace-builds/src-min-noconflict/ext-searchbox\";\r\nimport \"ace-builds/src-min-noconflict/ext-language_tools\";\r\nimport \"ace-builds/src-noconflict/theme-dracula\";\r\nimport \"ace-builds/src-noconflict/mode-python\";\r\nimport \"./App.css\";\r\nimport \"./components/Nav\";\r\nimport Nav from \"./components/Nav\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Center,\r\n  Grid,\r\n  Heading,\r\n  Textarea,\r\n  Menu,\r\n  MenuButton,\r\n  MenuOptionGroup,\r\n  MenuItemOption,\r\n  MenuList,\r\n  Alert,\r\n  Link,\r\n  Code,\r\n  VStack,\r\n  CircularProgress,\r\n  AlertTitle,\r\n  AlertIcon,\r\n  AlertDescription,\r\n  useToast,\r\n  Icon,\r\n  Flex,\r\n  Spacer,\r\n  IconButton,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Col, Row, Spinner } from \"reactstrap\";\r\nimport { runHelper } from \"./helper/runHelper\";\r\nimport { BiLink, BiRun, BiSave } from \"react-icons/bi\";\r\nimport { MdContentCopy, MdInput } from \"react-icons/md\";\r\nimport { VscOutput } from \"react-icons/vsc\";\r\nimport { newCode } from \"./helper/linkHelper\";\r\n\r\n//ACE-Editor Settings and API Settings\r\nconst languages = [\"c\", \"cpp\", \"java\", \"python\"];\r\nconst templateCode = [\r\n  `#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    printf(\"Hello\");\r\n    return 0;\r\n}`,\r\n  `#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define FASTIO                    \\\\\r\nios_base::sync_with_stdio(false); \\\\\r\ncin.tie(0);                       \\\\\r\ncout.tie(0);\r\n\r\nint main()\r\n{\r\n    FASTIO;\r\n    //------------------\r\n    cout<<\"Hello\\\\n\";\r\n    //--------------------\r\n    return 0;\r\n}`,\r\n  `//'main' method must be in a class 'Rextester'.\r\n//openjdk version '11.0.5'\r\n\r\nimport java.util.*;\r\nimport java.lang.*;\r\n\r\nclass Rextester\r\n{  \r\n    public static void main(String args[])\r\n    {\r\n        System.out.println(\"Hello, World!\");\r\n    }\r\n}`,\r\n  `print(\"Python is the Best\")`,\r\n];\r\n\r\n//-------------------------------------------------------------------------------\r\n\r\nfunction App({ entry = 1 }) {\r\n  const domain = \"https://runcode.ml/\";\r\n\r\n  const toast = useToast();\r\n\r\n  //STATES\r\n  const [Language, setLanguage] = useState(\"python\");\r\n  const [Mode, setMode] = useState(\"python\");\r\n  const [Output, setOutput] = useState(\"Run To Generate Output\");\r\n  const [Source, setSource] = useState(\"print('Python is the best!')\");\r\n  const [Input, setInput] = useState(\"\");\r\n  const [Status, setStatus] = useState();\r\n  const [Stats, setStats] = useState();\r\n  const [Loading, setLoading] = useState(false);\r\n  const [LinkLoading, setLinkLoading] = useState(\"\");\r\n  const [Warn, setWarn] = useState(false);\r\n  const [CodeWarn, setCodeWarn] = useState(false);\r\n  const [Entry, setEntry] = useState(entry);\r\n  const [Error, setError] = useState(false);\r\n  //-----------------------------\r\n\r\n  useEffect(() => {\r\n    if (Entry === 0) {\r\n      let localValues = loadStorage();\r\n      if (localValues !== undefined) {\r\n        setLanguage(localValues[0]);\r\n        setSource(localValues[1]);\r\n        let index = languages.indexOf(localValues[0]);\r\n        if (index === 0 || index === 1) {\r\n          setMode(\"c_cpp\");\r\n        } else {\r\n          setMode(localValues[0]);\r\n        }\r\n      }\r\n    } else if (Entry === 1) {\r\n      let localValues = loadStorage();\r\n      if (localValues !== undefined) {\r\n        setLanguage(localValues[0]);\r\n        setSource(localValues[1]);\r\n        setInput(localValues[2]);\r\n        setOutput(localValues[3]);\r\n        let index = languages.indexOf(localValues[0]);\r\n        if (index === 0 || index === 1) {\r\n          setMode(\"c_cpp\");\r\n        } else {\r\n          setMode(localValues[0]);\r\n        }\r\n      }\r\n      setEntry(0);\r\n    } else if (Entry === 2) {\r\n      setError(true);\r\n      let localValues = loadStorage();\r\n      if (localValues !== undefined) {\r\n        setLanguage(localValues[0]);\r\n        setSource(localValues[1]);\r\n        let index = languages.indexOf(localValues[0]);\r\n        if (index === 0 || index === 1) {\r\n          setMode(\"c_cpp\");\r\n        } else {\r\n          setMode(localValues[0]);\r\n        }\r\n      }\r\n      setEntry(0);\r\n    }\r\n    //eslint-disable-next-line\r\n  }, [Loading, LinkLoading]);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    let code = [];\r\n    if (typeof window !== undefined) {\r\n      if (localStorage.getItem(\"source\")) {\r\n        code = JSON.parse(localStorage.getItem(\"source\"));\r\n        code = [];\r\n      }\r\n      code.push(Language);\r\n      code.push(Source);\r\n      code.push(Input);\r\n      code.push(Output);\r\n      localStorage.setItem(\"source\", JSON.stringify(code));\r\n    }\r\n    setLoading(false);\r\n    //eslint-disable-next-line\r\n  }, [Source, Language]);\r\n\r\n  const loadStorage = () => {\r\n    if (typeof window !== undefined) {\r\n      if (localStorage.getItem(\"source\")) {\r\n        return JSON.parse(localStorage.getItem(\"source\"));\r\n      } else {\r\n        let code = [\"python\", \"\", \"\", \"Run to Generate Output\"];\r\n        localStorage.setItem(\"source\", JSON.stringify(code));\r\n      }\r\n    }\r\n  };\r\n\r\n  function onChange(newValue) {\r\n    setSource(newValue);\r\n  }\r\n\r\n  var runArgs = {\r\n    language: Language,\r\n    source: Source,\r\n    stdin: Input,\r\n  };\r\n\r\n  const save = () => {\r\n    setLoading(true);\r\n    let code = [];\r\n    if (typeof window !== undefined) {\r\n      if (localStorage.getItem(\"source\")) {\r\n        code = JSON.parse(localStorage.getItem(\"source\"));\r\n        code = [];\r\n      }\r\n      code.push(Language);\r\n      code.push(Source);\r\n      code.push(Input);\r\n      code.push(Output);\r\n      localStorage.setItem(\"source\", JSON.stringify(code));\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const localStorageSetter = (output = Output) => {\r\n    let code = [];\r\n    if (typeof window !== undefined) {\r\n      if (localStorage.getItem(\"source\")) {\r\n        code = JSON.parse(localStorage.getItem(\"source\"));\r\n        code = [];\r\n      }\r\n      code.push(Language);\r\n      code.push(Source);\r\n      code.push(Input);\r\n      code.push(output);\r\n      localStorage.setItem(\"source\", JSON.stringify(code));\r\n    }\r\n  };\r\n\r\n  const run = () => {\r\n    setLoading(true);\r\n    localStorageSetter();\r\n    setOutput(\"running...\");\r\n    let output = \"\";\r\n    runHelper(runArgs)\r\n      .then((data) => {\r\n        console.log(data);\r\n        if (data.stderr !== \"\") {\r\n          setOutput(\"Errors:\\n\" + data.stderr);\r\n          setStatus(\"error\");\r\n          output = data.output;\r\n          localStorageSetter(output);\r\n        } else if (data.stdout !== \"\") {\r\n          setStatus(\"success\");\r\n          setOutput(data.stdout);\r\n          output = data.stdout;\r\n          localStorageSetter(output);\r\n        } else {\r\n          setOutput(\"Please try again, no output is generated!\");\r\n          output = \"Please try again, no output is generated!\";\r\n          setStatus(\"error\");\r\n          localStorageSetter(output);\r\n        }\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  const runAndLink = () => {\r\n    setLoading(true);\r\n    setCodeWarn(true);\r\n    setLinkLoading(\"Generating Link...\");\r\n    localStorageSetter();\r\n    setOutput(\"running...\");\r\n\r\n    newCode({\r\n      language: Language,\r\n      code: Source,\r\n      input: Input,\r\n    })\r\n      .then((data) => {\r\n        if (data.error) {\r\n          console.log(data.error);\r\n        } else {\r\n          setLinkLoading(domain + data.shortid);\r\n          let output = \"\";\r\n          if (data.stderr !== \"\") {\r\n            setOutput(\"Errors:\\n\" + data.stderr);\r\n            setStatus(\"error\");\r\n            output = data.output;\r\n            localStorageSetter(output);\r\n          } else if (data.stdout !== \"\") {\r\n            setStatus(\"success\");\r\n            setOutput(data.stdout);\r\n            output = data.stdout;\r\n            localStorageSetter(output);\r\n          } else {\r\n            setOutput(\"Please try again, no output is generated!\");\r\n            output = \"Please try again, no output is generated!\";\r\n            setStatus(\"error\");\r\n            localStorageSetter(output);\r\n          }\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n    setLoading(false);\r\n  };\r\n\r\n  const handleInput = (name) => (event) => {\r\n    const value = event.target.value;\r\n    setInput(value);\r\n  };\r\n  const showWarning = () => {\r\n    toast.closeAll();\r\n    toast({\r\n      title: \"Warning\",\r\n      description:\r\n        \"If you change the language, your code will be reset, even if saved locally. Please be sure!!\",\r\n      isClosable: true,\r\n      status: \"warning\",\r\n      duration: \"4000\",\r\n      onCloseComplete: setWarn(false),\r\n    });\r\n  };\r\n  const showCodeWarn = () => {\r\n    toast.closeAll();\r\n    toast({\r\n      title: \"Warning\",\r\n      description:\r\n        \"All codes expire after 30 days. Please make a backup if it's important.\",\r\n      isClosable: true,\r\n      status: \"warning\",\r\n      duration: \"4000\",\r\n      onCloseComplete: setCodeWarn(false),\r\n    });\r\n  };\r\n  const showError = () => {\r\n    toast.closeAll();\r\n    toast({\r\n      title: \"Error\",\r\n      description:\r\n        \"We encountered an error while loading the link, please check your URL and try again. There is a chance that the code has expired too (All codes expire after 30 days)\",\r\n      isClosable: true,\r\n      status: \"error\",\r\n      duration: \"7000\",\r\n      onCloseComplete: setError(false),\r\n    });\r\n  };\r\n  return (\r\n    <Box>\r\n      <Nav />\r\n      <Row style={{ maxWidth: \"100%\", margin: \"auto\", padding: \"10px\" }}>\r\n        <Col xs=\"12\" md=\"8\" lg=\"8\">\r\n          <Grid templateColumns=\"repeat(3, 1fr)\" gap={6} marginBottom=\"10px\">\r\n            <Box w=\"100%\" h=\"10\" />\r\n            <Box w=\"100%\" h=\"10\">\r\n              <Menu closeOnSelect={false}>\r\n                <MenuButton\r\n                  w=\"100%\"\r\n                  as={Button}\r\n                  colorScheme=\"blue\"\r\n                  onClick={() => setWarn(!Warn)}\r\n                >\r\n                  {Language.charAt(0).toUpperCase() + Language.slice(1)}\r\n                </MenuButton>\r\n                <MenuList minWidth=\"240px\">\r\n                  <MenuOptionGroup defaultValue={Language} type=\"radio\">\r\n                    {languages.map((language, index) => (\r\n                      <MenuItemOption\r\n                        key={language}\r\n                        value={language}\r\n                        onClick={() => {\r\n                          setWarn(false);\r\n                          if (language === \"c\" || language === \"cpp\") {\r\n                            setMode(\"c_cpp\");\r\n                            import(`ace-builds/src-noconflict/mode-c_cpp`);\r\n                          } else {\r\n                            setMode(language);\r\n                            import(\r\n                              `ace-builds/src-noconflict/mode-${language}`\r\n                            );\r\n                          }\r\n                          setLanguage(language);\r\n                          setSource(templateCode[index]);\r\n                        }}\r\n                      >\r\n                        {language.charAt(0).toUpperCase() + language.slice(1)}\r\n                      </MenuItemOption>\r\n                    ))}\r\n                  </MenuOptionGroup>\r\n                </MenuList>\r\n              </Menu>\r\n            </Box>\r\n            <Box w=\"100%\" h=\"10\" />\r\n          </Grid>\r\n          <Center className=\"editor\" maxW=\"100%\">\r\n            <AceEditor\r\n              width=\"100%\"\r\n              fontSize=\"1rem\"\r\n              mode={Mode}\r\n              theme=\"dracula\"\r\n              onChange={onChange}\r\n              name=\"source\"\r\n              value={Source}\r\n              editorProps={{ $blockScrolling: true }}\r\n              setOptions={{\r\n                enableBasicAutocompletion: true,\r\n                enableLiveAutocompletion: true,\r\n                showLineNumbers: true,\r\n                tabSize: 4,\r\n                showPrintMargin: false,\r\n              }}\r\n              showGutter={true}\r\n              highlightActiveLine={true}\r\n            />\r\n          </Center>\r\n          <Box padding=\"20px\">\r\n            <Flex>\r\n              <Button\r\n                size=\"lg\"\r\n                colorScheme=\"blue\"\r\n                onClick={save}\r\n                marginLeft=\"3px\"\r\n                marginRight=\"3px\"\r\n              >\r\n                <Icon as={BiSave} marginRight=\"3px\" />\r\n                Save\r\n              </Button>\r\n              <Spacer />\r\n              <Button\r\n                size=\"lg\"\r\n                colorScheme=\"blue\"\r\n                onClick={run}\r\n                marginLeft=\"3px\"\r\n                marginRight=\"3px\"\r\n              >\r\n                <Icon as={BiRun} marginRight=\"3px\" />\r\n                Run\r\n              </Button>\r\n              <Spacer />\r\n              <Button\r\n                size=\"lg\"\r\n                colorScheme=\"blue\"\r\n                onClick={runAndLink}\r\n                marginLeft=\"3px\"\r\n                marginRight=\"3px\"\r\n              >\r\n                <Icon as={BiLink} marginRight=\"3px\" />\r\n                Link\r\n              </Button>\r\n            </Flex>\r\n          </Box>\r\n          {LinkLoading && (\r\n            <Alert width=\"100%\" padding=\"20px\" borderRadius=\"10px\">\r\n              {LinkLoading && (\r\n                <AlertDescription>\r\n                  {LinkLoading === \"Generating Link...\" && (\r\n                    <div>\r\n                      <Spinner />\r\n                      <AlertDescription paddingLeft=\"3px\">\r\n                        {LinkLoading}\r\n                      </AlertDescription>\r\n                    </div>\r\n                  )}\r\n                  {LinkLoading !== \"Generating Link...\" && (\r\n                    <AlertTitle width=\"100%\" justifyContent=\"center\">\r\n                      <Link isExternal={true} href={LinkLoading}>\r\n                        {LinkLoading}\r\n                      </Link>\r\n                    </AlertTitle>\r\n                  )}\r\n                </AlertDescription>\r\n              )}\r\n              {LinkLoading !== \"Generating Link...\" && (\r\n                <Box>\r\n                  <IconButton\r\n                    position=\"absolute\"\r\n                    right=\"15px\"\r\n                    top=\"12px\"\r\n                    as={MdContentCopy}\r\n                    color=\"white\"\r\n                    bg=\"transparent\"\r\n                    onClick={() => {\r\n                      navigator.clipboard.writeText(LinkLoading);\r\n                    }}\r\n                  />\r\n                </Box>\r\n              )}\r\n            </Alert>\r\n          )}\r\n        </Col>\r\n        <Col xs=\"12\" md=\"4\">\r\n          <VStack width=\"100%\">\r\n            <Box padding=\"20px\" width=\"100%\" minH=\"250px\">\r\n              <Heading size=\"sm\" textAlign=\"center\" paddingBottom=\"10px\">\r\n                <Icon as={MdInput} w={6} h={6} />\r\n                INPUT\r\n              </Heading>\r\n              <Textarea\r\n                size=\"md\"\r\n                width=\"100%\"\r\n                height=\"220px\"\r\n                resize=\"both\"\r\n                placeholder=\"Enter your Input here\"\r\n                onChange={handleInput(\"Input\")}\r\n                value={Input}\r\n                whiteSpace=\"pre\"\r\n              />\r\n            </Box>\r\n            {Loading && (\r\n              <Box width=\"100%\" padding=\"20px\">\r\n                <Center>\r\n                  <CircularProgress isIndeterminate />\r\n                </Center>\r\n              </Box>\r\n            )}\r\n            <Box padding=\"20px\" minH=\"250px\" width=\"100%\">\r\n              <Heading size=\"sm\" textAlign=\"center\" paddingBottom=\"10px\">\r\n                <Icon as={VscOutput} w={6} h={6} />\r\n                OUTPUT\r\n              </Heading>\r\n              <Textarea\r\n                size=\"md\"\r\n                width=\"100%\"\r\n                resize=\"both\"\r\n                height=\"220px\"\r\n                placeholder=\"Enter your Input here\"\r\n                isReadOnly={true}\r\n                value={Output}\r\n                whiteSpace=\"pre\"\r\n              />\r\n            </Box>\r\n            {Status && (\r\n              <Box\r\n                padding=\"20px\"\r\n                height=\"50px\"\r\n                width=\"100%\"\r\n                marginBottom=\"100px\"\r\n              >\r\n                <Alert status={Status}>\r\n                  <AlertIcon />\r\n                  <AlertTitle>\r\n                    {Status.charAt(0).toUpperCase() + Status.slice(1)}\r\n                  </AlertTitle>\r\n                  <AlertDescription>{Stats}</AlertDescription>\r\n                </Alert>\r\n              </Box>\r\n            )}\r\n          </VStack>\r\n        </Col>\r\n      </Row>\r\n      <Alert\r\n        justifyContent=\"center\"\r\n        textAlign=\"center\"\r\n        marginTop=\"20px\"\r\n        borderRadius=\"12px\"\r\n      >\r\n        Made with ❤️️ by\r\n        <Link marginLeft=\"6px\" color=\"blue.300\" href=\"https://nmreddy.ml\">\r\n          <Code colorScheme=\"blue\" padding=\"5px\">\r\n            <Heading size=\"sm\">Manish</Heading>\r\n          </Code>\r\n        </Link>\r\n      </Alert>\r\n      {Warn && showWarning()}\r\n      {Error && showError()}\r\n      {CodeWarn && showCodeWarn()}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\Web\\IDE\\frontend\\src\\redirect.js",[],"D:\\Web\\IDE\\frontend\\src\\backend.js",[],"D:\\Web\\IDE\\frontend\\src\\helper\\linkHelper.js",[],"D:\\Web\\IDE\\frontend\\src\\components\\Nav.js",[],"D:\\Web\\IDE\\frontend\\src\\helper\\runHelper.js",[],{"ruleId":"40","severity":1,"message":"41","line":98,"column":17,"nodeType":"42","messageId":"43","endLine":98,"endColumn":25},"no-unused-vars","'setStats' is assigned a value but never used.","Identifier","unusedVar"]